{"version":3,"file":"source-map.mjs","sources":["../node_modules/@jridgewell/sourcemap-codec/dist/sourcemap-codec.mjs","../node_modules/@jridgewell/resolve-uri/dist/resolve-uri.mjs","../node_modules/@jridgewell/trace-mapping/dist/trace-mapping.mjs","../node_modules/@jridgewell/set-array/dist/set-array.mjs","../node_modules/@jridgewell/gen-mapping/dist/gen-mapping.mjs","../../src/source-map.ts"],"sourcesContent":["const comma = ','.charCodeAt(0);\nconst semicolon = ';'.charCodeAt(0);\nconst chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\nconst intToChar = new Uint8Array(64); // 64 possible chars.\nconst charToInteger = new Uint8Array(128); // z is 122 in ASCII\nfor (let i = 0; i < chars.length; i++) {\n    const c = chars.charCodeAt(i);\n    charToInteger[c] = i;\n    intToChar[i] = c;\n}\n// Provide a fallback for older environments.\nconst td = typeof TextDecoder !== 'undefined'\n    ? new TextDecoder()\n    : typeof Buffer !== 'undefined'\n        ? {\n            decode(buf) {\n                const out = Buffer.from(buf.buffer, buf.byteOffset, buf.byteLength);\n                return out.toString();\n            },\n        }\n        : {\n            decode(buf) {\n                let out = '';\n                for (let i = 0; i < buf.length; i++) {\n                    out += String.fromCharCode(buf[i]);\n                }\n                return out;\n            },\n        };\nfunction decode(mappings) {\n    const state = new Int32Array(5);\n    const decoded = [];\n    let line = [];\n    let sorted = true;\n    let lastCol = 0;\n    for (let i = 0; i < mappings.length;) {\n        const c = mappings.charCodeAt(i);\n        if (c === comma) {\n            i++;\n        }\n        else if (c === semicolon) {\n            state[0] = lastCol = 0;\n            if (!sorted)\n                sort(line);\n            sorted = true;\n            decoded.push(line);\n            line = [];\n            i++;\n        }\n        else {\n            i = decodeInteger(mappings, i, state, 0); // generatedCodeColumn\n            const col = state[0];\n            if (col < lastCol)\n                sorted = false;\n            lastCol = col;\n            if (!hasMoreSegments(mappings, i)) {\n                line.push([col]);\n                continue;\n            }\n            i = decodeInteger(mappings, i, state, 1); // sourceFileIndex\n            i = decodeInteger(mappings, i, state, 2); // sourceCodeLine\n            i = decodeInteger(mappings, i, state, 3); // sourceCodeColumn\n            if (!hasMoreSegments(mappings, i)) {\n                line.push([col, state[1], state[2], state[3]]);\n                continue;\n            }\n            i = decodeInteger(mappings, i, state, 4); // nameIndex\n            line.push([col, state[1], state[2], state[3], state[4]]);\n        }\n    }\n    if (!sorted)\n        sort(line);\n    decoded.push(line);\n    return decoded;\n}\nfunction decodeInteger(mappings, pos, state, j) {\n    let value = 0;\n    let shift = 0;\n    let integer = 0;\n    do {\n        const c = mappings.charCodeAt(pos++);\n        integer = charToInteger[c];\n        value |= (integer & 31) << shift;\n        shift += 5;\n    } while (integer & 32);\n    const shouldNegate = value & 1;\n    value >>>= 1;\n    if (shouldNegate) {\n        value = -0x80000000 | -value;\n    }\n    state[j] += value;\n    return pos;\n}\nfunction hasMoreSegments(mappings, i) {\n    if (i >= mappings.length)\n        return false;\n    const c = mappings.charCodeAt(i);\n    if (c === comma || c === semicolon)\n        return false;\n    return true;\n}\nfunction sort(line) {\n    line.sort(sortComparator);\n}\nfunction sortComparator(a, b) {\n    return a[0] - b[0];\n}\nfunction encode(decoded) {\n    const state = new Int32Array(5);\n    let buf = new Uint8Array(1024);\n    let pos = 0;\n    for (let i = 0; i < decoded.length; i++) {\n        const line = decoded[i];\n        if (i > 0) {\n            buf = reserve(buf, pos, 1);\n            buf[pos++] = semicolon;\n        }\n        if (line.length === 0)\n            continue;\n        state[0] = 0;\n        for (let j = 0; j < line.length; j++) {\n            const segment = line[j];\n            // We can push up to 5 ints, each int can take at most 7 chars, and we\n            // may push a comma.\n            buf = reserve(buf, pos, 36);\n            if (j > 0)\n                buf[pos++] = comma;\n            pos = encodeInteger(buf, pos, state, segment, 0); // generatedCodeColumn\n            if (segment.length === 1)\n                continue;\n            pos = encodeInteger(buf, pos, state, segment, 1); // sourceFileIndex\n            pos = encodeInteger(buf, pos, state, segment, 2); // sourceCodeLine\n            pos = encodeInteger(buf, pos, state, segment, 3); // sourceCodeColumn\n            if (segment.length === 4)\n                continue;\n            pos = encodeInteger(buf, pos, state, segment, 4); // nameIndex\n        }\n    }\n    return td.decode(buf.subarray(0, pos));\n}\nfunction reserve(buf, pos, count) {\n    if (buf.length > pos + count)\n        return buf;\n    const swap = new Uint8Array(buf.length * 2);\n    swap.set(buf);\n    return swap;\n}\nfunction encodeInteger(buf, pos, state, segment, j) {\n    const next = segment[j];\n    let num = next - state[j];\n    state[j] = next;\n    num = num < 0 ? (-num << 1) | 1 : num << 1;\n    do {\n        let clamped = num & 0b011111;\n        num >>>= 5;\n        if (num > 0)\n            clamped |= 0b100000;\n        buf[pos++] = intToChar[clamped];\n    } while (num > 0);\n    return pos;\n}\n\nexport { decode, encode };\n//# sourceMappingURL=sourcemap-codec.mjs.map\n","// Matches the scheme of a URL, eg \"http://\"\nconst schemeRegex = /^[\\w+.-]+:\\/\\//;\n/**\n * Matches the parts of a URL:\n * 1. Scheme, including \":\", guaranteed.\n * 2. User/password, including \"@\", optional.\n * 3. Host, guaranteed.\n * 4. Port, including \":\", optional.\n * 5. Path, including \"/\", optional.\n */\nconst urlRegex = /^([\\w+.-]+:)\\/\\/([^@/#?]*@)?([^:/#?]*)(:\\d+)?(\\/[^#?]*)?