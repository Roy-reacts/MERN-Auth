var assert = require('assert');
var OffsetBuffer = require('../');

describe('OffsetBuffer', function() {
  var o;
  beforeEach(function() {
    o = new OffsetBuffer();
  });

  describe('.take()', function() {
    it('should return empty buffer', function() {
      var b = new Buffer('hello world');
      o.push(b);
      var r = o.take(0);
      assert.equal(r.length, 0);
      assert.equal(o.size, b.length);
    });

    it('should return the first buffer itself', function() {
      var b = new Buffer('hello world');
      o.push(b);
      var r = o.take(b.length);
      assert(r === b);
      assert(o.isEmpty());
    });

    it('should return the slice of the buffer ', function() {
      var b = new Buffer('hello world');
      o.push(b);
      assert.equal(o.take(5).toString(), 'hello');
      assert.equal(o.take(1).toString(), ' ');
      assert.equal(o.take(5).toString(), 'world');
      assert(o.isEmpty());
    });

    it('should concat buffers', function() {
      o.push(new Buffer('hello'));
      o.push(new Buffer(' '));
      o.push(new Buffer('world!'));
      assert.equal(o.take(11).toString(), 'hello world');
      assert.equal(o.take(1).toString(), '!');
      assert(o.isEmpty());
    });
  });

  describe('.skip', function() {
    it('should skip bytes', function() {
      o.push(new Buffer('hello '));
      o.push(new Buffer('world'));
      o.push(new Buffer(' oh gosh'));

      assert.equal(o.take(2).toString(), 'he');
      o.skip(1);
      assert.equal(o.take(2).toString(), 'lo');
      